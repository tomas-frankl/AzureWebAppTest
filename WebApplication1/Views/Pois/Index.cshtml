@using System.Web.UI.WebControls
@model IEnumerable<AzureWebAppTest.Models.Poi>

@{
    ViewBag.Title = "Index";
}

<h2>Index</h2>

<p>
    @Html.ActionLink("Create New", "Create")
</p>


@{string nameSign = "";}
@{string altitudeSign = "";}
@{string countrySign = "";}
@{string categorySign = "";}
@{string addedbySign = "";}

<p>
    <b>SortBy: </b>
    @{
        switch (ViewBag.CurrentSort)
        {
            case "name_asc":
                nameSign = "↑";
                <text>Name ↑</text>
                break;
            case "name_desc":
                nameSign = "↓";
                <text>Name ↓</text>
                break;
            case "altitude_asc":
                altitudeSign = "↑";
                break;
            case "altitude_desc":
                altitudeSign = "↓";
                break;
            case "category_asc":
                categorySign = "↑";
                break;
            case "category_desc":
                categorySign = "↓";
                break;
            case "country_asc":
                countrySign = "↑";
                break;
            case "country_desc":
                countrySign = "↓";
                break;
            case "addedby_asc":
                addedbySign = "↑";
                break;
            case "addedby_desc":
                addedbySign = "↓";
                break;
            default:
                <text>undefined</text>
                break;
        }
        <br />
    }
</p>

@using (Html.BeginForm("Index", "Pois", FormMethod.Get))
{
    <p>
        Find by name: @Html.TextBox("searchString", ViewBag.CurrentFilter as string)
        <input type="submit" value="Search" />
    </p>
}

<table class="table">
    <tr>
        <th>
            @Html.ActionLink(Html.DisplayNameFor(model => model.Name).ToHtmlString(),
                "Index", new { sortOrder = ViewBag.NameSortParam, searchString = ViewBag.CurrentFilter })
            @nameSign
        </th>
        <th>
            @Html.ActionLink(Html.DisplayNameFor(model => model.Altitude).ToHtmlString(),
                "Index", new { sortOrder = ViewBag.AltitudeSortParam, searchString = ViewBag.CurrentFilter })
            @altitudeSign
        </th>
        <th>
            @Html.ActionLink(Html.DisplayNameFor(model => model.Category).ToHtmlString(),
                "Index", new { sortOrder = ViewBag.CategorySortParam, searchString = ViewBag.CurrentFilter })
            @categorySign
        </th>
        <th>
            @Html.ActionLink(
                Html.DisplayNameFor(model => model.CountryCode).ToHtmlString(),
                "Index", new { sortOrder = ViewBag.CountrySortParam, searchString = ViewBag.CurrentFilter })
            @countrySign
        </th>
        <th>
            @Html.ActionLink(
                Html.DisplayNameFor(model => model.AddedBy).ToHtmlString(),
                "Index", new { sortOrder = ViewBag.AddedBySortParam, searchString = ViewBag.CurrentFilter })
            @addedbySign
        </th>
        <th></th>
    </tr>

    @foreach (var item in Model)
    {
        <tr>
            <td>
                @Html.DisplayFor(modelItem => item.Name)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.Altitude)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.Category)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.CountryCode)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.AddedBy)
            </td>
            <td>
                @Html.ActionLink("Edit", "Edit", new { id = item.Id }) |
                @Html.ActionLink("Details", "Details", new { id = item.Id }) |
                @Html.ActionLink("Delete", "Delete", new { id = item.Id })
            </td>
        </tr>
    }

</table>
